// Code generated by protoc-gen-go. DO NOT EDIT.
// source: qlog/protos/log.proto

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	qlog/protos/log.proto

It has these top-level messages:
	LogRequest
	LogResponse
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogRequest struct {
	ServiceType string `protobuf:"bytes,1,opt,name=service_type,json=serviceType" json:"service_type,omitempty"`
	ServiceFlag string `protobuf:"bytes,2,opt,name=service_flag,json=serviceFlag" json:"service_flag,omitempty"`
	Level       string `protobuf:"bytes,3,opt,name=level" json:"level,omitempty"`
	Content     string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
}

func (m *LogRequest) Reset()                    { *m = LogRequest{} }
func (m *LogRequest) String() string            { return proto.CompactTextString(m) }
func (*LogRequest) ProtoMessage()               {}
func (*LogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LogRequest) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *LogRequest) GetServiceFlag() string {
	if m != nil {
		return m.ServiceFlag
	}
	return ""
}

func (m *LogRequest) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *LogRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type LogResponse struct {
	Status bool `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
}

func (m *LogResponse) Reset()                    { *m = LogResponse{} }
func (m *LogResponse) String() string            { return proto.CompactTextString(m) }
func (*LogResponse) ProtoMessage()               {}
func (*LogResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LogResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*LogRequest)(nil), "protos.LogRequest")
	proto.RegisterType((*LogResponse)(nil), "protos.LogResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Log service

type LogClient interface {
	Record(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
}

type logClient struct {
	cc *grpc.ClientConn
}

func NewLogClient(cc *grpc.ClientConn) LogClient {
	return &logClient{cc}
}

func (c *logClient) Record(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := grpc.Invoke(ctx, "/protos.Log/Record", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Log service

type LogServer interface {
	Record(context.Context, *LogRequest) (*LogResponse, error)
}

func RegisterLogServer(s *grpc.Server, srv LogServer) {
	s.RegisterService(&_Log_serviceDesc, srv)
}

func _Log_Record_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Record(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Log/Record",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Record(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Log_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Log",
	HandlerType: (*LogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Record",
			Handler:    _Log_Record_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qlog/protos/log.proto",
}

func init() { proto.RegisterFile("qlog/protos/log.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0x4d, 0x4b, 0xc4, 0x30,
	0x10, 0x86, 0xad, 0xd5, 0xaa, 0x53, 0x4f, 0xe3, 0x07, 0xc1, 0x93, 0x16, 0x04, 0x4f, 0x2d, 0xd8,
	0x9b, 0x3f, 0xc0, 0x53, 0x4f, 0xc1, 0xbb, 0xd4, 0x3a, 0x06, 0x21, 0x74, 0xd2, 0x4e, 0x5a, 0xe8,
	0x75, 0x7f, 0xf9, 0x42, 0xd2, 0x65, 0xb7, 0xb7, 0xbc, 0x4f, 0x5e, 0x66, 0xe6, 0x81, 0x87, 0xc1,
	0xb2, 0xa9, 0xdc, 0xc8, 0x9e, 0xa5, 0xb2, 0x6c, 0xca, 0xf0, 0xc4, 0x2c, 0x92, 0x62, 0x97, 0x00,
	0x34, 0x6c, 0x34, 0x0d, 0x13, 0x89, 0xc7, 0x17, 0xb8, 0x15, 0x1a, 0xe7, 0xff, 0x8e, 0xbe, 0xfd,
	0xe2, 0x48, 0x25, 0xcf, 0xc9, 0xdb, 0x8d, 0xce, 0x57, 0xf6, 0xb5, 0x38, 0x3a, 0xad, 0xfc, 0xd9,
	0xd6, 0xa8, 0xf3, 0x4d, 0xe5, 0xd3, 0xb6, 0x06, 0xef, 0xe1, 0xd2, 0xd2, 0x4c, 0x56, 0xa5, 0xe1,
	0x2f, 0x06, 0x54, 0x70, 0xd5, 0x71, 0xef, 0xa9, 0xf7, 0xea, 0x22, 0xf0, 0x43, 0x2c, 0x5e, 0x21,
	0x0f, 0x37, 0x88, 0xe3, 0x5e, 0x08, 0x1f, 0x21, 0x13, 0xdf, 0xfa, 0x49, 0xc2, 0xfa, 0x6b, 0xbd,
	0xa6, 0xf7, 0x0f, 0x48, 0x1b, 0x36, 0x58, 0x43, 0xa6, 0xa9, 0xe3, 0xf1, 0x17, 0x31, 0xca, 0x48,
	0x79, 0x34, 0x78, 0xba, 0xdb, 0xb0, 0x38, 0xb1, 0x38, 0xfb, 0x89, 0xbe, 0xf5, 0x3e, 0x00, 0x00,
	0xff, 0xff, 0xd9, 0x74, 0xf4, 0xb2, 0x0f, 0x01, 0x00, 0x00,
}
